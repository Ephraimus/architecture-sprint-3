@startuml

!define RECTANGLE_COLOR #ADD8E6

' Использование C4 для описания контейнеров
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

' Контексты контейнеров
Person(customer, "Пользователь", "Человек, использующий систему")
System_Boundary(smart_home_system, "Умный дом") {
    Container(api_gateway, "API Gateway", "Nginx", "Единая точка входа для всех запросов клиента")
    Container(user_service, "User Service", "FastAPI/Python", "Управление учетными записями пользователей, аутентификация и авторизация")
    Container(device_management, "Device Management Service", "FastAPI/Python", "Управление и мониторинг всех устройств умного дома")
    Container(automation_service, "Automation Service", "FastAPI/Python", "Сценарии и правила автоматизации")
    Container(telemetry_service, "Telemetry Service", "FastAPI/Python", "Сбор и хранение данных телеметрии")
    Container(notification_service, "Notification Service", "FastAPI/Python", "Отправка уведомлений пользователям")
    Container(mobile_app, "Mobile App / Web Portal", "React/Flutter", "Приложение для управления умным домом")
    ContainerDb(user_db, "User Database", "PostgreSQL", "Хранение данных пользователей и авторизационной информации")
    ContainerDb(device_db, "Device Database", "PostgreSQL", "Хранение данных устройств")
    ContainerDb(telemetry_db, "Telemetry Database", "PostgreSQL", "Хранение данных телеметрии")
    ContainerDb(state_db_device_management, "Device Management State DB", "PostgreSQL", "Хранение состояний устройств")
    ContainerDb(state_db_automation_service, "Automation State DB", "PostgreSQL", "Хранение состояний сценариев автоматизации")
    ContainerDb(state_db_telemetry_service, "Telemetry State DB", "PostgreSQL", "Хранение состояний телеметрии")
    ContainerDb(state_db_notification_service, "Notification State DB", "PostgreSQL", "Хранение состояний уведомлений")
    Container(kafka_queue, "Kafka", "Apache Kafka", "Шина данных для обмена сообщениями между микросервисами")
}

' Взаимодействия между контейнерами
Rel(customer, mobile_app, "HTTP", "Взаимодействие с системой через приложение")
Rel(mobile_app, api_gateway, "HTTP", "Запросы пользователя к API Gateway")
Rel(api_gateway, user_service, "HTTP", "Управление пользователями, аутентификация и авторизация")
Rel(api_gateway, device_management, "HTTP", "Управление устройствами")
Rel(api_gateway, automation_service, "HTTP", "Запросы автоматизации")
Rel(api_gateway, telemetry_service, "HTTP", "Запросы телеметрии")
Rel(api_gateway, notification_service, "HTTP", "Запросы уведомлений")

Rel(user_service, user_db, "Хранение данных пользователей и авторизационной информации")
Rel(device_management, device_db, "Хранение данных устройств")
Rel(device_management, state_db_device_management, "Хранение состояний устройств")
Rel(automation_service, state_db_automation_service, "Хранение состояний сценариев автоматизации")
Rel(telemetry_service, telemetry_db, "Хранение данных телеметрии")
Rel(telemetry_service, state_db_telemetry_service, "Хранение состояний телеметрии")
Rel(notification_service, state_db_notification_service, "Хранение состояний уведомлений")

Rel(device_management, kafka_queue, "Producer", "События устройств")
Rel(automation_service, kafka_queue, "Producer", "Сценарии автоматизации")
Rel(telemetry_service, kafka_queue, "Producer", "Данные телеметрии")
Rel(notification_service, kafka_queue, "Producer", "Запросы на уведомление")

Rel(kafka_queue, telemetry_service, "Consumer", "Данные телеметрии")
Rel(kafka_queue, notification_service, "Consumer", "События для уведомлений")

@enduml
