@startuml

!define RECTANGLE_COLOR #ADD8E6

' Использование C4 для описания контейнеров
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

' Контексты контейнеров
Person(customer, "Пользователь", "Человек, использующий систему")
System_Boundary(banking_system, "Умный дом") {
    Container(api_gateway, "API Gateway", "Nginx", "Единая точка входа для всех запросов клиента")
    Container(user_management, "User Management Service", "FastAPI/Python", "Регистрация и управление учетными записями пользователей")
    Container(auth_service, "Authentication and Authorization Service", "FastAPI/Python", "Управление аутентификацией и авторизацией пользователей")
    Container(device_management, "Device Management Service", "FastAPI/Python", "Управление и мониторинг устройств умного дома")
    Container(heating_control, "Heating Control Service", "FastAPI/Python", "Управление системами отопления")
    Container(lighting_control, "Lighting Control Service", "FastAPI/Python", "Управление системами освещения")
    Container(gate_control, "Gate Control Service", "FastAPI/Python", "Управление воротами и дверями")
    Container(surveillance, "Surveillance Service", "C++", "Система видеонаблюдения и мониторинга")
    Container(automation_service, "Automation Service", "FastAPI/Python", "Сценарии и правила автоматизации")
    Container(telemetry_service, "Telemetry Service", "FastAPI/Python", "Сбор и хранение данных телеметрии")
    Container(notification_service, "Notification Service", "FastAPI/Python", "Отправка уведомлений пользователям")
    ContainerDb(user_db, "User Database", "PostgreSQL", "Хранение данных пользователей")
    ContainerDb(device_db, "Device Database", "PostgreSQL", "Хранение данных устройств")
    ContainerDb(telemetry_db, "Telemetry Database", "PostgreSQL", "Хранение данных телеметрии")
    ContainerDb(state_db_user_management, "User Management State DB", "PostgreSQL", "Хранение состояний для User Management Service")
    ContainerDb(state_db_auth_service, "Authentication and Authorization State DB", "PostgreSQL", "Хранение состояний для Authentication and Authorization Service")
    ContainerDb(state_db_device_management, "Device Management State DB", "PostgreSQL", "Хранение состояний для Device Management Service")
    ContainerDb(state_db_heating_control, "Heating Control State DB", "PostgreSQL", "Хранение состояний для Heating Control Service")
    ContainerDb(state_db_lighting_control, "Lighting Control State DB", "PostgreSQL", "Хранение состояний для Lighting Control Service")
    ContainerDb(state_db_gate_control, "Gate Control State DB", "PostgreSQL", "Хранение состояний для Gate Control Service")
    ContainerDb(state_db_automation_service, "Automation State DB", "PostgreSQL", "Хранение состояний для Automation Service")
    ContainerDb(state_db_telemetry_service, "Telemetry State DB", "PostgreSQL", "Хранение состояний для Telemetry Service")
    ContainerDb(state_db_notification_service, "Notification State DB", "PostgreSQL", "Хранение состояний для Notification Service")
    Container(kafka_queue, "Kafka", "Apache Kafka", "Шина данных для обмена сообщениями между микросервисами")
}

' Взаимодействия между контейнерами
Rel(customer, api_gateway, "HTTP", "Взаимодействие с системой через API Gateway")
Rel(api_gateway, user_management, "HTTP", "Запросы пользователя")
Rel(api_gateway, auth_service, "HTTP", "Аутентификация и авторизация")
Rel(api_gateway, device_management, "HTTP", "Управление устройствами")
Rel(api_gateway, heating_control, "HTTP", "Управление отоплением")
Rel(api_gateway, lighting_control, "HTTP", "Управление освещением")
Rel(api_gateway, gate_control, "HTTP", "Управление воротами")
Rel(api_gateway, surveillance, "HTTP", "Просмотр видео")
Rel(api_gateway, automation_service, "HTTP", "Запросы автоматизации")
Rel(api_gateway, telemetry_service, "HTTP", "Запросы телеметрии")
Rel(api_gateway, notification_service, "HTTP", "Запросы уведомлений")

Rel(user_management, user_db, "Хранение и управление пользователями")
Rel(user_management, state_db_user_management, "Хранение состояний")
Rel(auth_service, state_db_auth_service, "Хранение состояний аутентификации")
Rel(device_management, device_db, "Хранение данных устройств")
Rel(device_management, state_db_device_management, "Хранение состояний устройств")
Rel(heating_control, state_db_heating_control, "Хранение состояний отопления")
Rel(lighting_control, state_db_lighting_control, "Хранение состояний освещения")
Rel(gate_control, state_db_gate_control, "Хранение состояний ворот")
Rel(automation_service, state_db_automation_service, "Хранение состояний сценариев автоматизации")
Rel(telemetry_service, telemetry_db, "Хранение данных телеметрии")
Rel(telemetry_service, state_db_telemetry_service, "Хранение состояний телеметрии")
Rel(notification_service, state_db_notification_service, "Хранение состояний уведомлений")

Rel(device_management, kafka_queue, "Producer", "События устройства")
Rel(heating_control, kafka_queue, "Producer", "События отопления")
Rel(lighting_control, kafka_queue, "Producer", "События освещения")
Rel(gate_control, kafka_queue, "Producer", "События ворот")
Rel(surveillance, kafka_queue, "Producer", "События видеонаблюдения")
Rel(automation_service, kafka_queue, "Producer", "Сценарии автоматизации")
Rel(telemetry_service, kafka_queue, "Producer", "Данные телеметрии")
Rel(notification_service, kafka_queue, "Producer", "Запросы на уведомление")

Rel(kafka_queue, telemetry_service, "Consumer", "Данные телеметрии")
Rel(kafka_queue, notification_service, "Consumer", "События для уведомлений")

@enduml