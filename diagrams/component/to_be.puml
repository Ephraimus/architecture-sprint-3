@startuml

!define RECTANGLE_COLOR #ADD8E6

' Использование C4 для описания компонентов
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

' Контексты компонентов микросервиса Lighting Control Service
Container_Boundary(lighting_control, "Lighting Control Service") {
    Component(api_lighting, "API Component", "FastAPI", "Прием и обработка запросов для управления освещением")
    Component(command_processor_lighting, "Command Processor", "Python", "Обработка команд управления освещением и выполнение бизнес-логики")
    Component(state_repository_lighting, "State Repository", "Python", "Управление состоянием освещения, включая чтение и запись данных в базу данных")
    ComponentDb(state_db_lighting_control, "Lighting State Database", "PostgreSQL", "Хранение состояния освещения")

    api_lighting -> command_processor_lighting : "Получение команд управления освещением"
    command_processor_lighting -> state_repository_lighting : "Обновление состояния освещения"
    state_repository_lighting -> state_db_lighting_control : "Чтение/Запись состояния освещения"
}

' Контексты компонентов микросервиса Gate Control Service
Container_Boundary(gate_control, "Gate Control Service") {
    Component(api_gate, "API Component", "FastAPI", "Прием и обработка запросов для управления воротами")
    Component(command_processor_gate, "Command Processor", "Python", "Обработка команд управления воротами и выполнение логики бизнес-процессов")
    Component(state_repository_gate, "State Repository", "Python", "Управление состоянием ворот, включая чтение и запись данных в базу данных")
    ComponentDb(state_db_gate_control, "Gate State Database", "PostgreSQL", "Хранение состояния ворот")

    api_gate -> command_processor_gate : "Получение команд управления воротами"
    command_processor_gate -> state_repository_gate : "Обновление состояния ворот"
    state_repository_gate -> state_db_gate_control : "Чтение/Запись состояния ворот"
}

' Контексты компонентов микросервиса Notification Service
Container_Boundary(notification_service, "Notification Service") {
    Component(api_notification, "API Component", "FastAPI", "Прием и обработка запросов на отправку уведомлений")
    Component(notification_handler, "Notification Handler", "Python", "Обработка уведомлений и выполнение логики отправки")
    Component(state_repository_notification, "State Repository", "Python", "Управление состоянием уведомлений, включая чтение и запись данных в базу данных")
    ComponentDb(state_db_notification_service, "Notification State Database", "PostgreSQL", "Хранение состояния уведомлений")

    api_notification -> notification_handler : "Получение запросов на отправку уведомлений"
    notification_handler -> state_repository_notification : "Обновление состояния уведомлений"
    state_repository_notification -> state_db_notification_service : "Чтение/Запись состояния уведомлений"
}

@enduml